import { existsSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import { defineNuxtModule, createResolver, addPlugin, addTemplate, addImports } from '@nuxt/kit';

const module = defineNuxtModule({
  meta: {
    name: "pinia-colada",
    // NOTE: there is no config in nuxtConfig
    configKey: "colada"
  },
  // Default configuration options of the Nuxt module
  setup(_options, nuxt) {
    const { resolve } = createResolver(import.meta.url);
    const runtimeDir = fileURLToPath(new URL("./runtime", import.meta.url));
    const coladaOptionsPath = resolve(nuxt.options.rootDir, "colada.options");
    nuxt.options.vite.optimizeDeps ??= {};
    nuxt.options.vite.optimizeDeps.exclude ??= [];
    if (!nuxt.options.vite.optimizeDeps.exclude.includes("@pinia/colada")) {
      nuxt.options.vite.optimizeDeps.exclude.push("@pinia/colada");
    }
    addPlugin(resolve("./runtime/plugin"));
    addPlugin(resolve("./runtime/payload-plugin"));
    nuxt.options.build.transpile.push(runtimeDir);
    nuxt.hook("prepare:types", (opts) => {
      opts.references.push({ path: resolve("./types/build.d.ts") });
    });
    addTemplate({
      filename: "colada.options.mjs",
      getContents() {
        if (!existsSync(coladaOptionsPath + ".ts") && !existsSync(coladaOptionsPath + ".js")) {
          return "export default {}";
        }
        return `export { default as default } from "${coladaOptionsPath}";`;
      }
    });
    addImports([
      // queries
      { from: "@pinia/colada", name: "useQuery" },
      { from: "@pinia/colada", name: "defineQueryOptions" },
      { from: "@pinia/colada", name: "defineQuery" },
      { from: "@pinia/colada", name: "useQueryCache" },
      // mutations
      { from: "@pinia/colada", name: "useMutation" },
      { from: "@pinia/colada", name: "defineMutation" }
    ]);
  }
});

export { module as default };
